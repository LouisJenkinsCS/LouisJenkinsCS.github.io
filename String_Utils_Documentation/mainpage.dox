/**
 * @Author: Louis Jenkins
 * @Version: 1.1
 * @Brief: String Utilities for the C Programming Language.
 * 
 * What is String_Utils? String_Utils is basically an attempt at implementing a
 * very useful, somewhat efficient String library with basic string manipulations
 * comparators, and utilities offered in object oriented languages. In fact, this
 * is based on Java's String object's methods, hence the name of most of the functions.
 * 
 * My reason for creating this is, not just for fun, and boy was it ever, but 
 * also because I haven't found any attempt at creating a string library the way
 * I did. I rather dislike the way C's String library handles thing, it's too
 * minimal with how it abstracts and encapsulates it's functions, and plus it 
 * doesn't even have the basic functions that most people use day-to-day, but they
 * do however give you the tools to do it yourself, so I decided to. 
 * 
 * String_Utils has a plethora of well-tested (as well as you can with one person
 * writing this in one week) functions that you've grown to love in OOP languages
 * like Java, I.E Substring, Index_OF, Split/Join, etc. I attempted to implement
 * them as closely as they would be in Java, although of course since C and Java
 * are vastly different languages, with different paradigms, it's impossible
 * to make it exactly like so. 
 *
 * Another nice feature is the passing of parameters to tailor the operation the way you want
 * it if the library function supports it. For instance, one of the problems I had with the standard
 * C library was that strcat modifies the original string AND returns the pointer to the same
 * string it modified. I figured, why not just have an option to modify the string passed or not? 
 * What if I want to work with a string literal? Then with strcat, it would segfault. With my 
 * concat implementation, you can pass a string literal and not have it attempt to modify it, instead
 * create a copy of the string for you. In some functions, multiple parameter passing can be passed
 * with the | operator, I.E 'MODIFY | IGNORE_CASE'
 *
 * Another note, to keep the feature of being able to modify the string, all functions that can modify,
 * even if you do not modify it directly, must pass the address of the string (& operator). For exmaple,
 * String_Utils_concat(&string_one, string_two, MODIFY). A minor inconvenience.
 * 
 * I hope you enjoy my first project as much as I will, I worked very hard on it.
 * Hope it shows! Enjoy!
 */